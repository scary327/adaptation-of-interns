{
  "version": 3,
  "sources": ["../../frappe-gantt/src/date_utils.js", "../../frappe-gantt/src/svg_utils.js", "../../frappe-gantt/src/bar.js", "../../frappe-gantt/src/arrow.js", "../../frappe-gantt/src/popup.js", "../../frappe-gantt/src/index.js"],
  "sourcesContent": ["const YEAR = 'year';\nconst MONTH = 'month';\nconst DAY = 'day';\nconst HOUR = 'hour';\nconst MINUTE = 'minute';\nconst SECOND = 'second';\nconst MILLISECOND = 'millisecond';\n\nconst month_names = {\n    en: [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December'\n    ],\n    ru: [\n        'Январь',\n        'Февраль',\n        'Март',\n        'Апрель',\n        'Май',\n        'Июнь',\n        'Июль',\n        'Август',\n        'Сентябрь',\n        'Октябрь',\n        'Ноябрь',\n        'Декабрь'\n    ]\n};\n\nexport default {\n    parse(date, date_separator = '-', time_separator = /[.:]/) {\n        if (date instanceof Date) {\n            return date;\n        }\n        if (typeof date === 'string') {\n            let date_parts, time_parts;\n            const parts = date.split(' ');\n\n            date_parts = parts[0]\n                .split(date_separator)\n                .map(val => parseInt(val, 10));\n            time_parts = parts[1] && parts[1].split(time_separator);\n\n            // month is 0 indexed\n            date_parts[1] = date_parts[1] - 1;\n\n            let vals = date_parts;\n\n            if (time_parts && time_parts.length) {\n                if (time_parts.length == 4) {\n                    time_parts[3] = '0.' + time_parts[3];\n                    time_parts[3] = parseFloat(time_parts[3]) * 1000;\n                }\n                vals = vals.concat(time_parts);\n            }\n\n            return new Date(...vals);\n        }\n    },\n\n    to_string(date, with_time = false) {\n        if (!(date instanceof Date)) {\n            throw new TypeError('Invalid argument type');\n        }\n        const vals = this.get_date_values(date).map((val, i) => {\n            if (i === 1) {\n                // add 1 for month\n                val = val + 1;\n            }\n\n            if (i === 6) {\n                return padStart(val + '', 3, '0');\n            }\n\n            return padStart(val + '', 2, '0');\n        });\n        const date_string = `${vals[0]}-${vals[1]}-${vals[2]}`;\n        const time_string = `${vals[3]}:${vals[4]}:${vals[5]}.${vals[6]}`;\n\n        return date_string + (with_time ? ' ' + time_string : '');\n    },\n\n    format(date, format_string = 'YYYY-MM-DD HH:mm:ss.SSS', lang = 'en') {\n        const values = this.get_date_values(date).map(d => padStart(d, 2, 0));\n        const format_map = {\n            YYYY: values[0],\n            MM: padStart(+values[1] + 1, 2, 0),\n            DD: values[2],\n            HH: values[3],\n            mm: values[4],\n            ss: values[5],\n            SSS:values[6],\n            D: values[2],\n            MMMM: month_names[lang][+values[1]],\n            MMM: month_names[lang][+values[1]]\n        };\n\n        let str = format_string;\n        const formatted_values = [];\n\n        Object.keys(format_map)\n            .sort((a, b) => b.length - a.length) // big string first\n            .forEach(key => {\n                if (str.includes(key)) {\n                    str = str.replace(key, `$${formatted_values.length}`);\n                    formatted_values.push(format_map[key]);\n                }\n            });\n\n        formatted_values.forEach((value, i) => {\n            str = str.replace(`$${i}`, value);\n        });\n\n        return str;\n    },\n\n    diff(date_a, date_b, scale = DAY) {\n        let milliseconds, seconds, hours, minutes, days, months, years;\n\n        milliseconds = date_a - date_b;\n        seconds = milliseconds / 1000;\n        minutes = seconds / 60;\n        hours = minutes / 60;\n        days = hours / 24;\n        months = days / 30;\n        years = months / 12;\n\n        if (!scale.endsWith('s')) {\n            scale += 's';\n        }\n\n        return Math.floor(\n            {\n                milliseconds,\n                seconds,\n                minutes,\n                hours,\n                days,\n                months,\n                years\n            }[scale]\n        );\n    },\n\n    today() {\n        const vals = this.get_date_values(new Date()).slice(0, 3);\n        return new Date(...vals);\n    },\n\n    now() {\n        return new Date();\n    },\n\n    add(date, qty, scale) {\n        qty = parseInt(qty, 10);\n        const vals = [\n            date.getFullYear() + (scale === YEAR ? qty : 0),\n            date.getMonth() + (scale === MONTH ? qty : 0),\n            date.getDate() + (scale === DAY ? qty : 0),\n            date.getHours() + (scale === HOUR ? qty : 0),\n            date.getMinutes() + (scale === MINUTE ? qty : 0),\n            date.getSeconds() + (scale === SECOND ? qty : 0),\n            date.getMilliseconds() + (scale === MILLISECOND ? qty : 0)\n        ];\n        return new Date(...vals);\n    },\n\n    start_of(date, scale) {\n        const scores = {\n            [YEAR]: 6,\n            [MONTH]: 5,\n            [DAY]: 4,\n            [HOUR]: 3,\n            [MINUTE]: 2,\n            [SECOND]: 1,\n            [MILLISECOND]: 0\n        };\n\n        function should_reset(_scale) {\n            const max_score = scores[scale];\n            return scores[_scale] <= max_score;\n        }\n\n        const vals = [\n            date.getFullYear(),\n            should_reset(YEAR) ? 0 : date.getMonth(),\n            should_reset(MONTH) ? 1 : date.getDate(),\n            should_reset(DAY) ? 0 : date.getHours(),\n            should_reset(HOUR) ? 0 : date.getMinutes(),\n            should_reset(MINUTE) ? 0 : date.getSeconds(),\n            should_reset(SECOND) ? 0 : date.getMilliseconds()\n        ];\n\n        return new Date(...vals);\n    },\n\n    clone(date) {\n        return new Date(...this.get_date_values(date));\n    },\n\n    get_date_values(date) {\n        return [\n            date.getFullYear(),\n            date.getMonth(),\n            date.getDate(),\n            date.getHours(),\n            date.getMinutes(),\n            date.getSeconds(),\n            date.getMilliseconds()\n        ];\n    },\n\n    get_days_in_month(date) {\n        const no_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n        const month = date.getMonth();\n\n        if (month !== 1) {\n            return no_of_days[month];\n        }\n\n        // Feb\n        const year = date.getFullYear();\n        if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n            return 29;\n        }\n        return 28;\n    }\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\nfunction padStart(str, targetLength, padString) {\n    str = str + '';\n    targetLength = targetLength >> 0;\n    padString = String(typeof padString !== 'undefined' ? padString : ' ');\n    if (str.length > targetLength) {\n        return String(str);\n    } else {\n        targetLength = targetLength - str.length;\n        if (targetLength > padString.length) {\n            padString += padString.repeat(targetLength / padString.length);\n        }\n        return padString.slice(0, targetLength) + String(str);\n    }\n}\n", "export function $(expr, con) {\n    return typeof expr === 'string'\n        ? (con || document).querySelector(expr)\n        : expr || null;\n}\n\nexport function createSVG(tag, attrs) {\n    const elem = document.createElementNS('http://www.w3.org/2000/svg', tag);\n    for (let attr in attrs) {\n        if (attr === 'append_to') {\n            const parent = attrs.append_to;\n            parent.appendChild(elem);\n        } else if (attr === 'innerHTML') {\n            elem.innerHTML = attrs.innerHTML;\n        } else {\n            elem.setAttribute(attr, attrs[attr]);\n        }\n    }\n    return elem;\n}\n\nexport function animateSVG(svgElement, attr, from, to) {\n    const animatedSvgElement = getAnimationElement(svgElement, attr, from, to);\n\n    if (animatedSvgElement === svgElement) {\n        // triggered 2nd time programmatically\n        // trigger artificial click event\n        const event = document.createEvent('HTMLEvents');\n        event.initEvent('click', true, true);\n        event.eventName = 'click';\n        animatedSvgElement.dispatchEvent(event);\n    }\n}\n\nfunction getAnimationElement(\n    svgElement,\n    attr,\n    from,\n    to,\n    dur = '0.4s',\n    begin = '0.1s'\n) {\n    const animEl = svgElement.querySelector('animate');\n    if (animEl) {\n        $.attr(animEl, {\n            attributeName: attr,\n            from,\n            to,\n            dur,\n            begin: 'click + ' + begin // artificial click\n        });\n        return svgElement;\n    }\n\n    const animateElement = createSVG('animate', {\n        attributeName: attr,\n        from,\n        to,\n        dur,\n        begin,\n        calcMode: 'spline',\n        values: from + ';' + to,\n        keyTimes: '0; 1',\n        keySplines: cubic_bezier('ease-out')\n    });\n    svgElement.appendChild(animateElement);\n\n    return svgElement;\n}\n\nfunction cubic_bezier(name) {\n    return {\n        ease: '.25 .1 .25 1',\n        linear: '0 0 1 1',\n        'ease-in': '.42 0 1 1',\n        'ease-out': '0 0 .58 1',\n        'ease-in-out': '.42 0 .58 1'\n    }[name];\n}\n\n$.on = (element, event, selector, callback) => {\n    if (!callback) {\n        callback = selector;\n        $.bind(element, event, callback);\n    } else {\n        $.delegate(element, event, selector, callback);\n    }\n};\n\n$.off = (element, event, handler) => {\n    element.removeEventListener(event, handler);\n};\n\n$.bind = (element, event, callback) => {\n    event.split(/\\s+/).forEach(function(event) {\n        element.addEventListener(event, callback);\n    });\n};\n\n$.delegate = (element, event, selector, callback) => {\n    element.addEventListener(event, function(e) {\n        const delegatedTarget = e.target.closest(selector);\n        if (delegatedTarget) {\n            e.delegatedTarget = delegatedTarget;\n            callback.call(this, e, delegatedTarget);\n        }\n    });\n};\n\n$.closest = (selector, element) => {\n    if (!element) return null;\n\n    if (element.matches(selector)) {\n        return element;\n    }\n\n    return $.closest(selector, element.parentNode);\n};\n\n$.attr = (element, attr, value) => {\n    if (!value && typeof attr === 'string') {\n        return element.getAttribute(attr);\n    }\n\n    if (typeof attr === 'object') {\n        for (let key in attr) {\n            $.attr(element, key, attr[key]);\n        }\n        return;\n    }\n\n    element.setAttribute(attr, value);\n};\n", "import date_utils from './date_utils';\nimport { $, createSVG, animateSVG } from './svg_utils';\n\nexport default class Bar {\n    constructor(gantt, task) {\n        this.set_defaults(gantt, task);\n        this.prepare();\n        this.draw();\n        this.bind();\n    }\n\n    set_defaults(gantt, task) {\n        this.action_completed = false;\n        this.gantt = gantt;\n        this.task = task;\n    }\n\n    prepare() {\n        this.prepare_values();\n        this.prepare_helpers();\n    }\n\n    prepare_values() {\n        this.invalid = this.task.invalid;\n        this.height = this.gantt.options.bar_height;\n        this.x = this.compute_x();\n        this.y = this.compute_y();\n        this.corner_radius = this.gantt.options.bar_corner_radius;\n        this.duration =\n            date_utils.diff(this.task._end, this.task._start, 'hour') /\n            this.gantt.options.step;\n        this.width = this.gantt.options.column_width * this.duration;\n        this.progress_width =\n            this.gantt.options.column_width *\n                this.duration *\n                (this.task.progress / 100) || 0;\n        this.group = createSVG('g', {\n            class: 'bar-wrapper ' + (this.task.custom_class || ''),\n            'data-id': this.task.id\n        });\n        this.bar_group = createSVG('g', {\n            class: 'bar-group',\n            append_to: this.group\n        });\n        this.handle_group = createSVG('g', {\n            class: 'handle-group',\n            append_to: this.group\n        });\n    }\n\n    prepare_helpers() {\n        SVGElement.prototype.getX = function() {\n            return +this.getAttribute('x');\n        };\n        SVGElement.prototype.getY = function() {\n            return +this.getAttribute('y');\n        };\n        SVGElement.prototype.getWidth = function() {\n            return +this.getAttribute('width');\n        };\n        SVGElement.prototype.getHeight = function() {\n            return +this.getAttribute('height');\n        };\n        SVGElement.prototype.getEndX = function() {\n            return this.getX() + this.getWidth();\n        };\n    }\n\n    draw() {\n        this.draw_bar();\n        this.draw_progress_bar();\n        this.draw_label();\n        this.draw_resize_handles();\n    }\n\n    draw_bar() {\n        this.$bar = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar',\n            append_to: this.bar_group\n        });\n\n        animateSVG(this.$bar, 'width', 0, this.width);\n\n        if (this.invalid) {\n            this.$bar.classList.add('bar-invalid');\n        }\n    }\n\n    draw_progress_bar() {\n        if (this.invalid) return;\n        this.$bar_progress = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.progress_width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar-progress',\n            append_to: this.bar_group\n        });\n\n        animateSVG(this.$bar_progress, 'width', 0, this.progress_width);\n    }\n\n    draw_label() {\n        createSVG('text', {\n            x: this.x + this.width / 2,\n            y: this.y + this.height / 2,\n            innerHTML: this.task.name,\n            class: 'bar-label',\n            append_to: this.bar_group\n        });\n        // labels get BBox in the next tick\n        requestAnimationFrame(() => this.update_label_position());\n    }\n\n    draw_resize_handles() {\n        if (this.invalid) return;\n\n        const bar = this.$bar;\n        const handle_width = 8;\n\n        createSVG('rect', {\n            x: bar.getX() + bar.getWidth() - 9,\n            y: bar.getY() + 1,\n            width: handle_width,\n            height: this.height - 2,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'handle right',\n            append_to: this.handle_group\n        });\n\n        createSVG('rect', {\n            x: bar.getX() + 1,\n            y: bar.getY() + 1,\n            width: handle_width,\n            height: this.height - 2,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'handle left',\n            append_to: this.handle_group\n        });\n\n        if (this.task.progress && this.task.progress < 100) {\n            this.$handle_progress = createSVG('polygon', {\n                points: this.get_progress_polygon_points().join(','),\n                class: 'handle progress',\n                append_to: this.handle_group\n            });\n        }\n    }\n\n    get_progress_polygon_points() {\n        const bar_progress = this.$bar_progress;\n        return [\n            bar_progress.getEndX() - 5,\n            bar_progress.getY() + bar_progress.getHeight(),\n            bar_progress.getEndX() + 5,\n            bar_progress.getY() + bar_progress.getHeight(),\n            bar_progress.getEndX(),\n            bar_progress.getY() + bar_progress.getHeight() - 8.66\n        ];\n    }\n\n    bind() {\n        if (this.invalid) return;\n        this.setup_click_event();\n    }\n\n    setup_click_event() {\n        $.on(this.group, 'focus ' + this.gantt.options.popup_trigger, e => {\n            if (this.action_completed) {\n                // just finished a move action, wait for a few seconds\n                return;\n            }\n\n            if (e.type === 'click') {\n                this.gantt.trigger_event('click', [this.task]);\n            }\n\n            this.gantt.unselect_all();\n            this.group.classList.toggle('active');\n\n            this.show_popup();\n        });\n    }\n\n    show_popup() {\n        if (this.gantt.bar_being_dragged) return;\n\n        const start_date = date_utils.format(this.task._start, 'MMM D');\n        const end_date = date_utils.format(\n            date_utils.add(this.task._end, -1, 'second'),\n            'MMM D'\n        );\n        const subtitle = start_date + ' - ' + end_date;\n\n        this.gantt.show_popup({\n            target_element: this.$bar,\n            title: this.task.name,\n            subtitle: subtitle,\n            task: this.task\n        });\n    }\n\n    update_bar_position({ x = null, width = null }) {\n        const bar = this.$bar;\n        if (x) {\n            // get all x values of parent task\n            const xs = this.task.dependencies.map(dep => {\n                return this.gantt.get_bar(dep).$bar.getX();\n            });\n            // child task must not go before parent\n            const valid_x = xs.reduce((prev, curr) => {\n                return x >= curr;\n            }, x);\n            if (!valid_x) {\n                width = null;\n                return;\n            }\n            this.update_attr(bar, 'x', x);\n        }\n        if (width && width >= this.gantt.options.column_width) {\n            this.update_attr(bar, 'width', width);\n        }\n        this.update_label_position();\n        this.update_handle_position();\n        this.update_progressbar_position();\n        this.update_arrow_position();\n    }\n\n    date_changed() {\n        let changed = false;\n        const { new_start_date, new_end_date } = this.compute_start_end_date();\n\n        if (Number(this.task._start) !== Number(new_start_date)) {\n            changed = true;\n            this.task._start = new_start_date;\n        }\n\n        if (Number(this.task._end) !== Number(new_end_date)) {\n            changed = true;\n            this.task._end = new_end_date;\n        }\n\n        if (!changed) return;\n\n        this.gantt.trigger_event('date_change', [\n            this.task,\n            new_start_date,\n            date_utils.add(new_end_date, -1, 'second')\n        ]);\n    }\n\n    progress_changed() {\n        const new_progress = this.compute_progress();\n        this.task.progress = new_progress;\n        this.gantt.trigger_event('progress_change', [this.task, new_progress]);\n    }\n\n    set_action_completed() {\n        this.action_completed = true;\n        setTimeout(() => (this.action_completed = false), 1000);\n    }\n\n    compute_start_end_date() {\n        const bar = this.$bar;\n        const x_in_units = bar.getX() / this.gantt.options.column_width;\n        const new_start_date = date_utils.add(\n            this.gantt.gantt_start,\n            x_in_units * this.gantt.options.step,\n            'hour'\n        );\n        const width_in_units = bar.getWidth() / this.gantt.options.column_width;\n        const new_end_date = date_utils.add(\n            new_start_date,\n            width_in_units * this.gantt.options.step,\n            'hour'\n        );\n\n        return { new_start_date, new_end_date };\n    }\n\n    compute_progress() {\n        const progress =\n            this.$bar_progress.getWidth() / this.$bar.getWidth() * 100;\n        return parseInt(progress, 10);\n    }\n\n    compute_x() {\n        const { step, column_width } = this.gantt.options;\n        const task_start = this.task._start;\n        const gantt_start = this.gantt.gantt_start;\n\n        const diff = date_utils.diff(task_start, gantt_start, 'hour');\n        let x = diff / step * column_width;\n\n        if (this.gantt.view_is('Month')) {\n            const diff = date_utils.diff(task_start, gantt_start, 'day');\n            x = diff * column_width / 30;\n        }\n        return x;\n    }\n\n    compute_y() {\n        return (\n            this.gantt.options.header_height +\n            this.gantt.options.padding +\n            this.task._index * (this.height + this.gantt.options.padding)\n        );\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.gantt.view_is('Week')) {\n            rem = dx % (this.gantt.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 14\n                    ? 0\n                    : this.gantt.options.column_width / 7);\n        } else if (this.gantt.view_is('Month')) {\n            rem = dx % (this.gantt.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 60\n                    ? 0\n                    : this.gantt.options.column_width / 30);\n        } else {\n            rem = dx % this.gantt.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 2\n                    ? 0\n                    : this.gantt.options.column_width);\n        }\n        return position;\n    }\n\n    update_attr(element, attr, value) {\n        value = +value;\n        if (!isNaN(value)) {\n            element.setAttribute(attr, value);\n        }\n        return element;\n    }\n\n    update_progressbar_position() {\n        this.$bar_progress.setAttribute('x', this.$bar.getX());\n        this.$bar_progress.setAttribute(\n            'width',\n            this.$bar.getWidth() * (this.task.progress / 100)\n        );\n    }\n\n    update_label_position() {\n        const bar = this.$bar,\n            label = this.group.querySelector('.bar-label');\n\n        if (label.getBBox().width > bar.getWidth()) {\n            label.classList.add('big');\n            label.setAttribute('x', bar.getX() + bar.getWidth() + 5);\n        } else {\n            label.classList.remove('big');\n            label.setAttribute('x', bar.getX() + bar.getWidth() / 2);\n        }\n    }\n\n    update_handle_position() {\n        const bar = this.$bar;\n        this.handle_group\n            .querySelector('.handle.left')\n            .setAttribute('x', bar.getX() + 1);\n        this.handle_group\n            .querySelector('.handle.right')\n            .setAttribute('x', bar.getEndX() - 9);\n        const handle = this.group.querySelector('.handle.progress');\n        handle &&\n            handle.setAttribute('points', this.get_progress_polygon_points());\n    }\n\n    update_arrow_position() {\n        this.arrows = this.arrows || [];\n        for (let arrow of this.arrows) {\n            arrow.update();\n        }\n    }\n}\n\nfunction isFunction(functionToCheck) {\n    var getType = {};\n    return (\n        functionToCheck &&\n        getType.toString.call(functionToCheck) === '[object Function]'\n    );\n}\n", "import { createSVG } from './svg_utils';\n\nexport default class Arrow {\n    constructor(gantt, from_task, to_task) {\n        this.gantt = gantt;\n        this.from_task = from_task;\n        this.to_task = to_task;\n\n        this.calculate_path();\n        this.draw();\n    }\n\n    calculate_path() {\n        let start_x =\n            this.from_task.$bar.getX() + this.from_task.$bar.getWidth() / 2;\n\n        const condition = () =>\n            this.to_task.$bar.getX() < start_x + this.gantt.options.padding &&\n            start_x > this.from_task.$bar.getX() + this.gantt.options.padding;\n\n        while (condition()) {\n            start_x -= 10;\n        }\n\n        const start_y =\n            this.gantt.options.header_height +\n            this.gantt.options.bar_height +\n            (this.gantt.options.padding + this.gantt.options.bar_height) *\n                this.from_task.task._index +\n            this.gantt.options.padding;\n\n        const end_x = this.to_task.$bar.getX() - this.gantt.options.padding / 2;\n        const end_y =\n            this.gantt.options.header_height +\n            this.gantt.options.bar_height / 2 +\n            (this.gantt.options.padding + this.gantt.options.bar_height) *\n                this.to_task.task._index +\n            this.gantt.options.padding;\n\n        const from_is_below_to =\n            this.from_task.task._index > this.to_task.task._index;\n        const curve = this.gantt.options.arrow_curve;\n        const clockwise = from_is_below_to ? 1 : 0;\n        const curve_y = from_is_below_to ? -curve : curve;\n        const offset = from_is_below_to\n            ? end_y + this.gantt.options.arrow_curve\n            : end_y - this.gantt.options.arrow_curve;\n\n        this.path = `\n            M ${start_x} ${start_y}\n            V ${offset}\n            a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\n            L ${end_x} ${end_y}\n            m -5 -5\n            l 5 5\n            l -5 5`;\n\n        if (\n            this.to_task.$bar.getX() <\n            this.from_task.$bar.getX() + this.gantt.options.padding\n        ) {\n            const down_1 = this.gantt.options.padding / 2 - curve;\n            const down_2 =\n                this.to_task.$bar.getY() +\n                this.to_task.$bar.getHeight() / 2 -\n                curve_y;\n            const left = this.to_task.$bar.getX() - this.gantt.options.padding;\n\n            this.path = `\n                M ${start_x} ${start_y}\n                v ${down_1}\n                a ${curve} ${curve} 0 0 1 -${curve} ${curve}\n                H ${left}\n                a ${curve} ${curve} 0 0 ${clockwise} -${curve} ${curve_y}\n                V ${down_2}\n                a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\n                L ${end_x} ${end_y}\n                m -5 -5\n                l 5 5\n                l -5 5`;\n        }\n    }\n\n    draw() {\n        this.element = createSVG('path', {\n            d: this.path,\n            'data-from': this.from_task.task.id,\n            'data-to': this.to_task.task.id\n        });\n    }\n\n    update() {\n        this.calculate_path();\n        this.element.setAttribute('d', this.path);\n    }\n}\n", "export default class Popup {\n    constructor(parent, custom_html) {\n        this.parent = parent;\n        this.custom_html = custom_html;\n        this.make();\n    }\n\n    make() {\n        this.parent.innerHTML = `\n            <div class=\"title\"></div>\n            <div class=\"subtitle\"></div>\n            <div class=\"pointer\"></div>\n        `;\n\n        this.hide();\n\n        this.title = this.parent.querySelector('.title');\n        this.subtitle = this.parent.querySelector('.subtitle');\n        this.pointer = this.parent.querySelector('.pointer');\n    }\n\n    show(options) {\n        if (!options.target_element) {\n            throw new Error('target_element is required to show popup');\n        }\n        if (!options.position) {\n            options.position = 'left';\n        }\n        const target_element = options.target_element;\n\n        if (this.custom_html) {\n            let html = this.custom_html(options.task);\n            html += '<div class=\"pointer\"></div>';\n            this.parent.innerHTML = html;\n            this.pointer = this.parent.querySelector('.pointer');\n        } else {\n            // set data\n            this.title.innerHTML = options.title;\n            this.subtitle.innerHTML = options.subtitle;\n            this.parent.style.width = this.parent.clientWidth + 'px';\n        }\n\n        // set position\n        let position_meta;\n        if (target_element instanceof HTMLElement) {\n            position_meta = target_element.getBoundingClientRect();\n        } else if (target_element instanceof SVGElement) {\n            position_meta = options.target_element.getBBox();\n        }\n\n        if (options.position === 'left') {\n            this.parent.style.left =\n                position_meta.x + (position_meta.width + 10) + 'px';\n            this.parent.style.top = position_meta.y + 'px';\n\n            this.pointer.style.transform = 'rotateZ(90deg)';\n            this.pointer.style.left = '-7px';\n            this.pointer.style.top = '2px';\n        }\n\n        // show\n        this.parent.style.opacity = 1;\n    }\n\n    hide() {\n        this.parent.style.opacity = 0;\n    }\n}\n", "import date_utils from './date_utils';\nimport { $, createSVG } from './svg_utils';\nimport Bar from './bar';\nimport Arrow from './arrow';\nimport Popup from './popup';\n\nimport './gantt.scss';\n\nexport default class Gantt {\n    constructor(wrapper, tasks, options) {\n        this.setup_wrapper(wrapper);\n        this.setup_options(options);\n        this.setup_tasks(tasks);\n        // initialize with default view mode\n        this.change_view_mode();\n        this.bind_events();\n    }\n\n    setup_wrapper(element) {\n        let svg_element, wrapper_element;\n\n        // CSS Selector is passed\n        if (typeof element === 'string') {\n            element = document.querySelector(element);\n        }\n\n        // get the SVGElement\n        if (element instanceof HTMLElement) {\n            wrapper_element = element;\n            svg_element = element.querySelector('svg');\n        } else if (element instanceof SVGElement) {\n            svg_element = element;\n        } else {\n            throw new TypeError(\n                'Frappé Gantt only supports usage of a string CSS selector,' +\n                    \" HTML DOM element or SVG DOM element for the 'element' parameter\"\n            );\n        }\n\n        // svg element\n        if (!svg_element) {\n            // create it\n            this.$svg = createSVG('svg', {\n                append_to: wrapper_element,\n                class: 'gantt'\n            });\n        } else {\n            this.$svg = svg_element;\n            this.$svg.classList.add('gantt');\n        }\n\n        // wrapper element\n        this.$container = document.createElement('div');\n        this.$container.classList.add('gantt-container');\n\n        const parent_element = this.$svg.parentElement;\n        parent_element.appendChild(this.$container);\n        this.$container.appendChild(this.$svg);\n\n        // popup wrapper\n        this.popup_wrapper = document.createElement('div');\n        this.popup_wrapper.classList.add('popup-wrapper');\n        this.$container.appendChild(this.popup_wrapper);\n    }\n\n    setup_options(options) {\n        const default_options = {\n            header_height: 50,\n            column_width: 30,\n            step: 24,\n            view_modes: [\n                'Quarter Day',\n                'Half Day',\n                'Day',\n                'Week',\n                'Month',\n                'Year'\n            ],\n            bar_height: 20,\n            bar_corner_radius: 3,\n            arrow_curve: 5,\n            padding: 18,\n            view_mode: 'Day',\n            date_format: 'YYYY-MM-DD',\n            popup_trigger: 'click',\n            custom_popup_html: null,\n            language: 'en'\n        };\n        this.options = Object.assign({}, default_options, options);\n    }\n\n    setup_tasks(tasks) {\n        // prepare tasks\n        this.tasks = tasks.map((task, i) => {\n            // convert to Date objects\n            task._start = date_utils.parse(task.start);\n            task._end = date_utils.parse(task.end);\n\n            // make task invalid if duration too large\n            if (date_utils.diff(task._end, task._start, 'year') > 10) {\n                task.end = null;\n            }\n\n            // cache index\n            task._index = i;\n\n            // invalid dates\n            if (!task.start && !task.end) {\n                const today = date_utils.today();\n                task._start = today;\n                task._end = date_utils.add(today, 2, 'day');\n            }\n\n            if (!task.start && task.end) {\n                task._start = date_utils.add(task._end, -2, 'day');\n            }\n\n            if (task.start && !task.end) {\n                task._end = date_utils.add(task._start, 2, 'day');\n            }\n\n            // if hours is not set, assume the last day is full day\n            // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\n            const task_end_values = date_utils.get_date_values(task._end);\n            if (task_end_values.slice(3).every(d => d === 0)) {\n                task._end = date_utils.add(task._end, 24, 'hour');\n            }\n\n            // invalid flag\n            if (!task.start || !task.end) {\n                task.invalid = true;\n            }\n\n            // dependencies\n            if (typeof task.dependencies === 'string' || !task.dependencies) {\n                let deps = [];\n                if (task.dependencies) {\n                    deps = task.dependencies\n                        .split(',')\n                        .map(d => d.trim())\n                        .filter(d => d);\n                }\n                task.dependencies = deps;\n            }\n\n            // uids\n            if (!task.id) {\n                task.id = generate_id(task);\n            }\n\n            return task;\n        });\n\n        this.setup_dependencies();\n    }\n\n    setup_dependencies() {\n        this.dependency_map = {};\n        for (let t of this.tasks) {\n            for (let d of t.dependencies) {\n                this.dependency_map[d] = this.dependency_map[d] || [];\n                this.dependency_map[d].push(t.id);\n            }\n        }\n    }\n\n    refresh(tasks) {\n        this.setup_tasks(tasks);\n        this.change_view_mode();\n    }\n\n    change_view_mode(mode = this.options.view_mode) {\n        this.update_view_scale(mode);\n        this.setup_dates();\n        this.render();\n        // fire viewmode_change event\n        this.trigger_event('view_change', [mode]);\n    }\n\n    update_view_scale(view_mode) {\n        this.options.view_mode = view_mode;\n\n        if (view_mode === 'Day') {\n            this.options.step = 24;\n            this.options.column_width = 38;\n        } else if (view_mode === 'Half Day') {\n            this.options.step = 24 / 2;\n            this.options.column_width = 38;\n        } else if (view_mode === 'Quarter Day') {\n            this.options.step = 24 / 4;\n            this.options.column_width = 38;\n        } else if (view_mode === 'Week') {\n            this.options.step = 24 * 7;\n            this.options.column_width = 140;\n        } else if (view_mode === 'Month') {\n            this.options.step = 24 * 30;\n            this.options.column_width = 120;\n        } else if (view_mode === 'Year') {\n            this.options.step = 24 * 365;\n            this.options.column_width = 120;\n        }\n    }\n\n    setup_dates() {\n        this.setup_gantt_dates();\n        this.setup_date_values();\n    }\n\n    setup_gantt_dates() {\n        this.gantt_start = this.gantt_end = null;\n\n        for (let task of this.tasks) {\n            // set global start and end date\n            if (!this.gantt_start || task._start < this.gantt_start) {\n                this.gantt_start = task._start;\n            }\n            if (!this.gantt_end || task._end > this.gantt_end) {\n                this.gantt_end = task._end;\n            }\n        }\n\n        this.gantt_start = date_utils.start_of(this.gantt_start, 'day');\n        this.gantt_end = date_utils.start_of(this.gantt_end, 'day');\n\n        // add date padding on both sides\n        if (this.view_is(['Quarter Day', 'Half Day'])) {\n            this.gantt_start = date_utils.add(this.gantt_start, -7, 'day');\n            this.gantt_end = date_utils.add(this.gantt_end, 7, 'day');\n        } else if (this.view_is('Month')) {\n            this.gantt_start = date_utils.start_of(this.gantt_start, 'year');\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'year');\n        } else if (this.view_is('Year')) {\n            this.gantt_start = date_utils.add(this.gantt_start, -2, 'year');\n            this.gantt_end = date_utils.add(this.gantt_end, 2, 'year');\n        } else {\n            this.gantt_start = date_utils.add(this.gantt_start, -1, 'month');\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'month');\n        }\n    }\n\n    setup_date_values() {\n        this.dates = [];\n        let cur_date = null;\n\n        while (cur_date === null || cur_date < this.gantt_end) {\n            if (!cur_date) {\n                cur_date = date_utils.clone(this.gantt_start);\n            } else {\n                if (this.view_is('Year')) {\n                    cur_date = date_utils.add(cur_date, 1, 'year');\n                } else if (this.view_is('Month')) {\n                    cur_date = date_utils.add(cur_date, 1, 'month');\n                } else {\n                    cur_date = date_utils.add(\n                        cur_date,\n                        this.options.step,\n                        'hour'\n                    );\n                }\n            }\n            this.dates.push(cur_date);\n        }\n    }\n\n    bind_events() {\n        this.bind_grid_click();\n        this.bind_bar_events();\n    }\n\n    render() {\n        this.clear();\n        this.setup_layers();\n        this.make_grid();\n        this.make_dates();\n        this.make_bars();\n        this.make_arrows();\n        this.map_arrows_on_bars();\n        this.set_width();\n        this.set_scroll_position();\n    }\n\n    setup_layers() {\n        this.layers = {};\n        const layers = ['grid', 'date', 'arrow', 'progress', 'bar', 'details'];\n        // make group layers\n        for (let layer of layers) {\n            this.layers[layer] = createSVG('g', {\n                class: layer,\n                append_to: this.$svg\n            });\n        }\n    }\n\n    make_grid() {\n        this.make_grid_background();\n        this.make_grid_rows();\n        this.make_grid_header();\n        this.make_grid_ticks();\n        this.make_grid_highlights();\n    }\n\n    make_grid_background() {\n        const grid_width = this.dates.length * this.options.column_width;\n        const grid_height =\n            this.options.header_height +\n            this.options.padding +\n            (this.options.bar_height + this.options.padding) *\n                this.tasks.length;\n\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: grid_width,\n            height: grid_height,\n            class: 'grid-background',\n            append_to: this.layers.grid\n        });\n\n        $.attr(this.$svg, {\n            height: grid_height + this.options.padding + 100,\n            width: '100%'\n        });\n    }\n\n    make_grid_rows() {\n        const rows_layer = createSVG('g', { append_to: this.layers.grid });\n        const lines_layer = createSVG('g', { append_to: this.layers.grid });\n\n        const row_width = this.dates.length * this.options.column_width;\n        const row_height = this.options.bar_height + this.options.padding;\n\n        let row_y = this.options.header_height + this.options.padding / 2;\n\n        for (let task of this.tasks) {\n            createSVG('rect', {\n                x: 0,\n                y: row_y,\n                width: row_width,\n                height: row_height,\n                class: 'grid-row',\n                append_to: rows_layer\n            });\n\n            createSVG('line', {\n                x1: 0,\n                y1: row_y + row_height,\n                x2: row_width,\n                y2: row_y + row_height,\n                class: 'row-line',\n                append_to: lines_layer\n            });\n\n            row_y += this.options.bar_height + this.options.padding;\n        }\n    }\n\n    make_grid_header() {\n        const header_width = this.dates.length * this.options.column_width;\n        const header_height = this.options.header_height + 10;\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: header_width,\n            height: header_height,\n            class: 'grid-header',\n            append_to: this.layers.grid\n        });\n    }\n\n    make_grid_ticks() {\n        let tick_x = 0;\n        let tick_y = this.options.header_height + this.options.padding / 2;\n        let tick_height =\n            (this.options.bar_height + this.options.padding) *\n            this.tasks.length;\n\n        for (let date of this.dates) {\n            let tick_class = 'tick';\n            // thick tick for monday\n            if (this.view_is('Day') && date.getDate() === 1) {\n                tick_class += ' thick';\n            }\n            // thick tick for first week\n            if (\n                this.view_is('Week') &&\n                date.getDate() >= 1 &&\n                date.getDate() < 8\n            ) {\n                tick_class += ' thick';\n            }\n            // thick ticks for quarters\n            if (this.view_is('Month') && (date.getMonth() + 1) % 3 === 0) {\n                tick_class += ' thick';\n            }\n\n            createSVG('path', {\n                d: `M ${tick_x} ${tick_y} v ${tick_height}`,\n                class: tick_class,\n                append_to: this.layers.grid\n            });\n\n            if (this.view_is('Month')) {\n                tick_x +=\n                    date_utils.get_days_in_month(date) *\n                    this.options.column_width /\n                    30;\n            } else {\n                tick_x += this.options.column_width;\n            }\n        }\n    }\n\n    make_grid_highlights() {\n        // highlight today's date\n        if (this.view_is('Day')) {\n            const x =\n                date_utils.diff(date_utils.today(), this.gantt_start, 'hour') /\n                this.options.step *\n                this.options.column_width;\n            const y = 0;\n\n            const width = this.options.column_width;\n            const height =\n                (this.options.bar_height + this.options.padding) *\n                    this.tasks.length +\n                this.options.header_height +\n                this.options.padding / 2;\n\n            createSVG('rect', {\n                x,\n                y,\n                width,\n                height,\n                class: 'today-highlight',\n                append_to: this.layers.grid\n            });\n        }\n    }\n\n    make_dates() {\n        for (let date of this.get_dates_to_draw()) {\n            createSVG('text', {\n                x: date.lower_x,\n                y: date.lower_y,\n                innerHTML: date.lower_text,\n                class: 'lower-text',\n                append_to: this.layers.date\n            });\n\n            if (date.upper_text) {\n                const $upper_text = createSVG('text', {\n                    x: date.upper_x,\n                    y: date.upper_y,\n                    innerHTML: date.upper_text,\n                    class: 'upper-text',\n                    append_to: this.layers.date\n                });\n\n                // remove out-of-bound dates\n                if (\n                    $upper_text.getBBox().x2 > this.layers.grid.getBBox().width\n                ) {\n                    $upper_text.remove();\n                }\n            }\n        }\n    }\n\n    get_dates_to_draw() {\n        let last_date = null;\n        const dates = this.dates.map((date, i) => {\n            const d = this.get_date_info(date, last_date, i);\n            last_date = date;\n            return d;\n        });\n        return dates;\n    }\n\n    get_date_info(date, last_date, i) {\n        if (!last_date) {\n            last_date = date_utils.add(date, 1, 'year');\n        }\n        const date_text = {\n            'Quarter Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            'Half Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            Day_lower:\n                date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Week_lower:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : date_utils.format(date, 'D', this.options.language),\n            Month_lower: date_utils.format(date, 'MMMM', this.options.language),\n            Year_lower: date_utils.format(date, 'YYYY', this.options.language),\n            'Quarter Day_upper':\n                date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : '',\n            'Half Day_upper':\n                date.getDate() !== last_date.getDate()\n                    ? date.getMonth() !== last_date.getMonth()\n                      ? date_utils.format(date, 'D MMM', this.options.language)\n                      : date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Day_upper:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Week_upper:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Month_upper:\n                date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : '',\n            Year_upper:\n                date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : ''\n        };\n\n        const base_pos = {\n            x: i * this.options.column_width,\n            lower_y: this.options.header_height,\n            upper_y: this.options.header_height - 25\n        };\n\n        const x_pos = {\n            'Quarter Day_lower': this.options.column_width * 4 / 2,\n            'Quarter Day_upper': 0,\n            'Half Day_lower': this.options.column_width * 2 / 2,\n            'Half Day_upper': 0,\n            Day_lower: this.options.column_width / 2,\n            Day_upper: this.options.column_width * 30 / 2,\n            Week_lower: 0,\n            Week_upper: this.options.column_width * 4 / 2,\n            Month_lower: this.options.column_width / 2,\n            Month_upper: this.options.column_width * 12 / 2,\n            Year_lower: this.options.column_width / 2,\n            Year_upper: this.options.column_width * 30 / 2\n        };\n\n        return {\n            upper_text: date_text[`${this.options.view_mode}_upper`],\n            lower_text: date_text[`${this.options.view_mode}_lower`],\n            upper_x: base_pos.x + x_pos[`${this.options.view_mode}_upper`],\n            upper_y: base_pos.upper_y,\n            lower_x: base_pos.x + x_pos[`${this.options.view_mode}_lower`],\n            lower_y: base_pos.lower_y\n        };\n    }\n\n    make_bars() {\n        this.bars = this.tasks.map(task => {\n            const bar = new Bar(this, task);\n            this.layers.bar.appendChild(bar.group);\n            return bar;\n        });\n    }\n\n    make_arrows() {\n        this.arrows = [];\n        for (let task of this.tasks) {\n            let arrows = [];\n            arrows = task.dependencies\n                .map(task_id => {\n                    const dependency = this.get_task(task_id);\n                    if (!dependency) return;\n                    const arrow = new Arrow(\n                        this,\n                        this.bars[dependency._index], // from_task\n                        this.bars[task._index] // to_task\n                    );\n                    this.layers.arrow.appendChild(arrow.element);\n                    return arrow;\n                })\n                .filter(Boolean); // filter falsy values\n            this.arrows = this.arrows.concat(arrows);\n        }\n    }\n\n    map_arrows_on_bars() {\n        for (let bar of this.bars) {\n            bar.arrows = this.arrows.filter(arrow => {\n                return (\n                    arrow.from_task.task.id === bar.task.id ||\n                    arrow.to_task.task.id === bar.task.id\n                );\n            });\n        }\n    }\n\n    set_width() {\n        const cur_width = this.$svg.getBoundingClientRect().width;\n        const actual_width = this.$svg\n            .querySelector('.grid .grid-row')\n            .getAttribute('width');\n        if (cur_width < actual_width) {\n            this.$svg.setAttribute('width', actual_width);\n        }\n    }\n\n    set_scroll_position() {\n        const parent_element = this.$svg.parentElement;\n        if (!parent_element) return;\n\n        const hours_before_first_task = date_utils.diff(\n            this.get_oldest_starting_date(),\n            this.gantt_start,\n            'hour'\n        );\n\n        const scroll_pos =\n            hours_before_first_task /\n                this.options.step *\n                this.options.column_width -\n            this.options.column_width;\n\n        parent_element.scrollLeft = scroll_pos;\n    }\n\n    bind_grid_click() {\n        $.on(\n            this.$svg,\n            this.options.popup_trigger,\n            '.grid-row, .grid-header',\n            () => {\n                this.unselect_all();\n                this.hide_popup();\n            }\n        );\n    }\n\n    bind_bar_events() {\n        let is_dragging = false;\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing_left = false;\n        let is_resizing_right = false;\n        let parent_bar_id = null;\n        let bars = []; // instanceof Bar\n        this.bar_being_dragged = null;\n\n        function action_in_progress() {\n            return is_dragging || is_resizing_left || is_resizing_right;\n        }\n\n        $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', (e, element) => {\n            const bar_wrapper = $.closest('.bar-wrapper', element);\n\n            if (element.classList.contains('left')) {\n                is_resizing_left = true;\n            } else if (element.classList.contains('right')) {\n                is_resizing_right = true;\n            } else if (element.classList.contains('bar-wrapper')) {\n                is_dragging = true;\n            }\n\n            bar_wrapper.classList.add('active');\n\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            parent_bar_id = bar_wrapper.getAttribute('data-id');\n            const ids = [\n                parent_bar_id,\n                ...this.get_all_dependent_tasks(parent_bar_id)\n            ];\n            bars = ids.map(id => this.get_bar(id));\n\n            this.bar_being_dragged = parent_bar_id;\n\n            bars.forEach(bar => {\n                const $bar = bar.$bar;\n                $bar.ox = $bar.getX();\n                $bar.oy = $bar.getY();\n                $bar.owidth = $bar.getWidth();\n                $bar.finaldx = 0;\n            });\n        });\n\n        $.on(this.$svg, 'mousemove', e => {\n            if (!action_in_progress()) return;\n            const dx = e.offsetX - x_on_start;\n            const dy = e.offsetY - y_on_start;\n\n            bars.forEach(bar => {\n                const $bar = bar.$bar;\n                $bar.finaldx = this.get_snap_position(dx);\n\n                if (is_resizing_left) {\n                    if (parent_bar_id === bar.task.id) {\n                        bar.update_bar_position({\n                            x: $bar.ox + $bar.finaldx,\n                            width: $bar.owidth - $bar.finaldx\n                        });\n                    } else {\n                        bar.update_bar_position({\n                            x: $bar.ox + $bar.finaldx\n                        });\n                    }\n                } else if (is_resizing_right) {\n                    if (parent_bar_id === bar.task.id) {\n                        bar.update_bar_position({\n                            width: $bar.owidth + $bar.finaldx\n                        });\n                    }\n                } else if (is_dragging) {\n                    bar.update_bar_position({ x: $bar.ox + $bar.finaldx });\n                }\n            });\n        });\n\n        document.addEventListener('mouseup', e => {\n            if (is_dragging || is_resizing_left || is_resizing_right) {\n                bars.forEach(bar => bar.group.classList.remove('active'));\n            }\n\n            is_dragging = false;\n            is_resizing_left = false;\n            is_resizing_right = false;\n        });\n\n        $.on(this.$svg, 'mouseup', e => {\n            this.bar_being_dragged = null;\n            bars.forEach(bar => {\n                const $bar = bar.$bar;\n                if (!$bar.finaldx) return;\n                bar.date_changed();\n                bar.set_action_completed();\n            });\n        });\n\n        this.bind_bar_progress();\n    }\n\n    bind_bar_progress() {\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing = null;\n        let bar = null;\n        let $bar_progress = null;\n        let $bar = null;\n\n        $.on(this.$svg, 'mousedown', '.handle.progress', (e, handle) => {\n            is_resizing = true;\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            const $bar_wrapper = $.closest('.bar-wrapper', handle);\n            const id = $bar_wrapper.getAttribute('data-id');\n            bar = this.get_bar(id);\n\n            $bar_progress = bar.$bar_progress;\n            $bar = bar.$bar;\n\n            $bar_progress.finaldx = 0;\n            $bar_progress.owidth = $bar_progress.getWidth();\n            $bar_progress.min_dx = -$bar_progress.getWidth();\n            $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\n        });\n\n        $.on(this.$svg, 'mousemove', e => {\n            if (!is_resizing) return;\n            let dx = e.offsetX - x_on_start;\n            let dy = e.offsetY - y_on_start;\n\n            if (dx > $bar_progress.max_dx) {\n                dx = $bar_progress.max_dx;\n            }\n            if (dx < $bar_progress.min_dx) {\n                dx = $bar_progress.min_dx;\n            }\n\n            const $handle = bar.$handle_progress;\n            $.attr($bar_progress, 'width', $bar_progress.owidth + dx);\n            $.attr($handle, 'points', bar.get_progress_polygon_points());\n            $bar_progress.finaldx = dx;\n        });\n\n        $.on(this.$svg, 'mouseup', () => {\n            is_resizing = false;\n            if (!($bar_progress && $bar_progress.finaldx)) return;\n            bar.progress_changed();\n            bar.set_action_completed();\n        });\n    }\n\n    get_all_dependent_tasks(task_id) {\n        let out = [];\n        let to_process = [task_id];\n        while (to_process.length) {\n            const deps = to_process.reduce((acc, curr) => {\n                acc = acc.concat(this.dependency_map[curr]);\n                return acc;\n            }, []);\n\n            out = out.concat(deps);\n            to_process = deps.filter(d => !to_process.includes(d));\n        }\n\n        return out.filter(Boolean);\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.view_is('Week')) {\n            rem = dx % (this.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 14\n                    ? 0\n                    : this.options.column_width / 7);\n        } else if (this.view_is('Month')) {\n            rem = dx % (this.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 60\n                    ? 0\n                    : this.options.column_width / 30);\n        } else {\n            rem = dx % this.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 2\n                    ? 0\n                    : this.options.column_width);\n        }\n        return position;\n    }\n\n    unselect_all() {\n        [...this.$svg.querySelectorAll('.bar-wrapper')].forEach(el => {\n            el.classList.remove('active');\n        });\n    }\n\n    view_is(modes) {\n        if (typeof modes === 'string') {\n            return this.options.view_mode === modes;\n        }\n\n        if (Array.isArray(modes)) {\n            return modes.some(mode => this.options.view_mode === mode);\n        }\n\n        return false;\n    }\n\n    get_task(id) {\n        return this.tasks.find(task => {\n            return task.id === id;\n        });\n    }\n\n    get_bar(id) {\n        return this.bars.find(bar => {\n            return bar.task.id === id;\n        });\n    }\n\n    show_popup(options) {\n        if (!this.popup) {\n            this.popup = new Popup(\n                this.popup_wrapper,\n                this.options.custom_popup_html\n            );\n        }\n        this.popup.show(options);\n    }\n\n    hide_popup() {\n        this.popup && this.popup.hide();\n    }\n\n    trigger_event(event, args) {\n        if (this.options['on_' + event]) {\n            this.options['on_' + event].apply(null, args);\n        }\n    }\n\n    /**\n     * Gets the oldest starting date from the list of tasks\n     *\n     * @returns Date\n     * @memberof Gantt\n     */\n    get_oldest_starting_date() {\n        return this.tasks\n            .map(task => task._start)\n            .reduce(\n                (prev_date, cur_date) =>\n                    cur_date <= prev_date ? cur_date : prev_date\n            );\n    }\n\n    /**\n     * Clear all elements from the parent svg element\n     *\n     * @memberof Gantt\n     */\n    clear() {\n        this.$svg.innerHTML = '';\n    }\n}\n\nfunction generate_id(task) {\n    return (\n        task.name +\n        '_' +\n        Math.random()\n            .toString(36)\n            .slice(2, 12)\n    );\n}\n"],
  "mappings": "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",
  "names": ["event", "diff"]
}
